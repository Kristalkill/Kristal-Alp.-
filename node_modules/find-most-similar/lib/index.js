"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findMostSimilar = findMostSimilar;
// dist :: String, Int, String, Int -> Int
function dist(s, sLen, t, tLen) {
  if (sLen === 0) {
    return tLen;
  } else if (tLen === 0) {
    return sLen;
  }

  var cost = s[sLen - 1] === t[tLen - 1] ? 0 : 1;
  return Math.min(dist(s, sLen - 1, t, tLen) + 1, dist(s, sLen, t, tLen - 1) + 1, dist(s, sLen - 1, t, tLen - 1) + cost);
}

// findClosest :: String, [String] -> String
function findMostSimilar(source, targets) {
  var sLen = source.length;

  // scoreStruct :: { score: Int, target: String }

  var _targets$reduce = targets.reduce(function (acc, target) {
    var score = dist(source, sLen, target, target.length);
    return score > acc.score ? acc : { score: score, target: target };
  }),
      target = _targets$reduce.target;

  return target;
}

exports.default = findMostSimilar;